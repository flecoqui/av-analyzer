pool:
  vmImage: ubuntu-latest

parameters:
  - name: ENVIRONMENT
    displayName: "RTSP Server environment"
    type: string
    default: "test"
    values:    
    - "dev"
    - "test"
    - "prod"
  - name: AZURE_APP_PREFIX
    displayName: "Application prefix used for naming"
    type: string
    default: "rtsp9999"
  - name: AZURE_REGION
    displayName: "Azure region where the service will be deployed"
    type: string
    default: "eastus2"
    values:    
    - "eastus2"
    - "westeurope"

variables:
  - group: rtsp-server-vg
  - name: RESOURCE_GROUP_NAME
    value: "rg${{ parameters.AZURE_APP_PREFIX }}${{ parameters.ENVIRONMENT }}"
  - name: CONTAINER_REGISTRY_NAME
    value: "acr${{ parameters.AZURE_APP_PREFIX }}${{ parameters.ENVIRONMENT }}"
  - name: CONTAINER_INSTANCE_NAME
    value: "aci${{ parameters.AZURE_APP_PREFIX }}${{ parameters.ENVIRONMENT }}"
  - name: CONTAINER_INSTANCE_IDENTITY_NAME
    value: "aciid${{ parameters.AZURE_APP_PREFIX }}${{ parameters.ENVIRONMENT }}"
  - name: AZURE_REGION
    value: "${{ parameters.AZURE_REGION }}"

stages:
- stage: DeployInfrastructure
  displayName: Deploy Infrastructure
  condition: succeeded()
  jobs:
  - job: JobDeployInfrastructure
    displayName: Job Deploy Infrastructure    
    steps:
    - checkout: self
      lfs: true
    - task: AzureCLI@2
      displayName: 'Step Deploy Infrastructure'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          echo "Create Resource Group  if not exists"
          if [ $(az group exists --name ${{ variables.RESOURCE_GROUP_NAME }}) = false ]; then
              echo "Create resource group  ${{ variables.RESOURCE_GROUP_NAME }}"
              az group create -l ${{ variables.AZURE_REGION }} -n ${{ variables.RESOURCE_GROUP_NAME }}
          fi
          ACR_NAME=$(az acr list --resource-group ${{ variables.CONTAINER_REGISTRY_NAME }} | jq -r '.[0].name') || true
          if [ -z "${ACR_NAME}" ] || [ "${ACR_NAME}" == "null" ] || [ "${ACR_NAME}" != "${{ variables.CONTAINER_REGISTRY_NAME }}" ]; then
            echo "Create Azure Container Registry  ${{ variables.CONTAINER_REGISTRY_NAME }}"
            az acr create -n ${{ variables.CONTAINER_REGISTRY_NAME }} -g ${{ variables.RESOURCE_GROUP_NAME }} -l ${{ variables.AZURE_REGION }} --sku Basic --admin-enabled false            
          fi
          echo "Create User Assigned Identity ${{ variables.CONTAINER_INSTANCE_IDENTITY_NAME }}"
          cmd="az identity create --resource-group ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_INSTANCE_IDENTITY_NAME }}"
          echo "$cmd"
          eval "$cmd"    

          # Get service principal ID of the user-assigned identity
          spID=$(az identity show \
          --resource-group  ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_INSTANCE_IDENTITY_NAME }} \
          --query principalId --output tsv)

          # Wait few seconds before assigning role
          echo "Wait 30 seconds"
          sleep 30
          
          CONTAINER_REGISTRY_LOGIN_SERVER=$(az acr show -n ${{ variables.CONTAINER_REGISTRY_NAME }} -g  ${{ variables.RESOURCE_GROUP_NAME }}  --query loginServer --output tsv)
          echo "Grant Access to the Azure Container Registry ${CONTAINER_REGISTRY_LOGIN_SERVER} from the Azure Container Instance ${{ variables.CONTAINER_INSTANCE_NAME }} role AcrPull"
          resourceID=$(az acr show --resource-group  ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_REGISTRY_NAME }} --query id --output tsv)
          cmd="az role assignment create --assignee ${spID} --scope ${resourceID} --role acrpull"
          echo "$cmd"
          eval "$cmd"

- stage: BuildImage
  displayName: Build Image
  condition: succeeded()
  jobs:
  - job: JobBuildImage
    displayName: Job Build Image    
    steps:
    - checkout: self
      lfs: true
    - task: AzureCLI@2
      displayName: 'Step Build Image'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          # Build RTSP server for RTSP stream emulation 
          APP_VERSION=$(date +"%y%m%d.%H%M%S")
          IMAGE_TAG=${APP_VERSION}
          ALTERNATIVE_TAG="latest"
          IMAGE_FOLDER="streamer"
          RTSPSERVER_NAME="rtspserver"
          FLAVOR="alpine"
          IMAGE_NAME="${RTSPSERVER_NAME}-${FLAVOR}-image"
          RTSP_SERVER_PORT=554
          
          cd ./envs/container/docker/rtspserver/${FLAVOR}

          mkdir -p ./input
          cp ./../../../../../content/input/*.mp4 ./input

          cmd="az acr login  --name ${{ variables.CONTAINER_REGISTRY_NAME }}"
          echo "$cmd"
          eval "$cmd"  

          CONTAINER_REGISTRY_LOGIN_SERVER=$(az acr show -n ${{ variables.CONTAINER_REGISTRY_NAME }} -g  ${{ variables.RESOURCE_GROUP_NAME }}  --query loginServer --output tsv)
          cmd="az acr build -t ${IMAGE_FOLDER}/${IMAGE_NAME}:${IMAGE_TAG} -r  ${{ variables.CONTAINER_REGISTRY_NAME }} -g  ${{ variables.RESOURCE_GROUP_NAME }} ."
          echo "$cmd"
          eval "$cmd"  
          cmd="az acr import --name  ${{ variables.CONTAINER_REGISTRY_NAME }} -g  ${{ variables.RESOURCE_GROUP_NAME }} --source ${CONTAINER_REGISTRY_LOGIN_SERVER}/${IMAGE_FOLDER}/${IMAGE_NAME}:${IMAGE_TAG} --image ${IMAGE_FOLDER}/${IMAGE_NAME}:${ALTERNATIVE_TAG} --force"
          echo "$cmd"
          eval "$cmd"  

- stage: DeployImage
  displayName: Deploy Image
  condition: succeeded()
  jobs:
  - job: JobDeployImage
    displayName: Job Deploy Image    
    steps:
    - checkout: self
      lfs: true
    - task: AzureCLI@2
      displayName: 'Step Deploy Image'  
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: "bash"
        addSpnToEnvironment: "true"
        scriptLocation: "inlineScript"
        inlineScript: |
          # Build RTSP server for RTSP stream emulation 
          APP_VERSION=$(date +"%y%m%d.%H%M%S")
          IMAGE_TAG=${APP_VERSION}
          ALTERNATIVE_TAG="latest"
          IMAGE_FOLDER="streamer"
          RTSPSERVER_NAME="rtspserver"
          FLAVOR="alpine"
          IMAGE_NAME="${RTSPSERVER_NAME}-${FLAVOR}-image"
          RTSP_SERVER_PORT=554

          cd ./envs/container/docker/rtspserver/${FLAVOR}

          mkdir -p ./input
          cp ./../../../../../content/input/*.mp4 ./input

          # Get resource ID of the user-assigned identity
          identityResourceID=$(az identity show \
          --resource-group  ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_INSTANCE_IDENTITY_NAME }} \
          --query id --output tsv)

          CONTAINER_REGISTRY_LOGIN_SERVER=$(az acr show -n ${{ variables.CONTAINER_REGISTRY_NAME }} -g  ${{ variables.RESOURCE_GROUP_NAME }}  --query loginServer --output tsv)
          cmd="az container create --resource-group ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_INSTANCE_NAME }} --image ${CONTAINER_REGISTRY_LOGIN_SERVER}/${IMAGE_FOLDER}/${IMAGE_NAME}:${ALTERNATIVE_TAG} --dns-name-label ${{ variables.CONTAINER_INSTANCE_NAME }} --ports ${RTSP_SERVER_PORT} -e PORT_RTSP=${RTSP_SERVER_PORT} --acr-identity ${identityResourceID}  --assign-identity ${identityResourceID}"
          echo "$cmd"
          eval "$cmd"    
          DNS_NAME=$(az container show --resource-group ${{ variables.RESOURCE_GROUP_NAME }} --name ${{ variables.CONTAINER_INSTANCE_NAME }} | jq -r '.ipAddress.fqdn')
          for i in ./input/*.mp4 
          do 
            echo "Run the following command:"
            echo "  ffprobe -i rtsp://${DNS_NAME}:${RTSP_SERVER_PORT}/media/$(basename $i)"
          done
          echo "Deploying the RTSP server to emulate the cameras done"
          
