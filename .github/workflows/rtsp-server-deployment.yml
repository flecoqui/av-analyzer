name: Build and Deploy RTSPServer
on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: "Environment (dev, test, prod, ...)"
        required: true
        type: choice
        default: "dev"
        options:
          - "dev"
          - "test"
          - "prod"
      AZURE_APP_PREFIX:
        description: "Application prefix used for naming"
        required: true
        default: "rtsp9999"
      AZURE_REGION:
        description: "Azure Region for the deployment"
        required: true
        type: choice
        default: "eastus2"
        options:
          - "eastus2"
          - "westeurope"


jobs:
  infrastructure:
    runs-on: ubuntu-22.04
    env:
      RESOURCE_GROUP_NAME: "rg${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_REGISTRY_NAME: "acr${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_INSTANCE_NAME: "aci${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      AZURE_REGION: "${{ github.event.inputs.AZURE_REGION }}"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Resource Group and Azure Container Registry
        continue-on-error: false
        run: |
          message="Create Resource Group  if not exists"
          echo "$message"
          if [ $(az group exists --name ${{ env.RESOURCE_GROUP_NAME }}) = false ]; then
              echo "Create resource group  ${{ env.RESOURCE_GROUP_NAME }}"
              az group create -l ${{ env.AZURE_REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}
          fi
          if [ $(az acr check-name --name ${{ env.CONTAINER_REGISTRY_NAME }} --query nameAvailable) = true ]; then
            echo "Create Azure Container Registry  ${{ env.CONTAINER_REGISTRY_NAME }}"
            az acr create -n ${{ env.CONTAINER_REGISTRY_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} -l ${{ env.AZURE_REGION }} --sku Basic --admin-enabled false            
          fi

  build:
    needs: infrastructure
    runs-on: ubuntu-22.04
    env:
      RESOURCE_GROUP_NAME: "rg${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_REGISTRY_NAME: "acr${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_INSTANCE_NAME: "aci${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_INSTANCE_IDENTITY_NAME: "aciid${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      AZURE_REGION: "${{ github.event.inputs.AZURE_REGION }}"
      CONTAINER_REGISTRY_LOGIN_SERVER: $(az acr show -n "acr${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}" -g "rg${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"  --query loginServer --output tsv)

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build and push Docker images to ACR
        run: |
          # Build RTSP server for RTSP stream emulation 
          APP_VERSION=$(date +"%y%m%d.%H%M%S")
          IMAGE_TAG=${APP_VERSION}
          ALTERNATIVE_TAG="latest"
          IMAGE_FOLDER="streamer"
          RTSPSERVER_NAME="rtspserver"
          FLAVOR="alpine"
          IMAGE_NAME="${RTSPSERVER_NAME}-${FLAVOR}-image"
          RTSP_SERVER_PORT=554
          
          cd ./envs/container/docker/rtspserver/${FLAVOR}

          mkdir -p ./input
          cp ./../../../../../content/input/*.mp4 ./input
          
          cmd="az acr login  --name ${{ env.CONTAINER_REGISTRY_NAME }}"
          echo "$cmd"
          eval "$cmd"  

          cmd="az acr build -t ${IMAGE_FOLDER}/${IMAGE_NAME}:${IMAGE_TAG} -r  ${{ env.CONTAINER_REGISTRY_NAME }} -g  ${{ env.RESOURCE_GROUP_NAME }} ."
          echo "$cmd"
          eval "$cmd"  
          cmd="az acr build -t ${IMAGE_FOLDER}/${IMAGE_NAME}:${ALTERNATIVE_TAG} -r  ${{ env.CONTAINER_REGISTRY_NAME }} -g  ${{ env.RESOURCE_GROUP_NAME }} ."
          echo "$cmd"
          eval "$cmd"  

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    env:
      RESOURCE_GROUP_NAME: "rg${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_REGISTRY_NAME: "acr${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_INSTANCE_NAME: "aci${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      CONTAINER_INSTANCE_IDENTITY_NAME: "aciid${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"
      AZURE_REGION: "${{ github.event.inputs.AZURE_REGION }}"
      CONTAINER_REGISTRY_LOGIN_SERVER: $(az acr show -n "acr${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}" -g "rg${{ github.event.inputs.AZURE_APP_PREFIX }}${{ github.event.inputs.ENVIRONMENT }}"  --query loginServer --output tsv)

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy images to ACI
        run: |
          # Build RTSP server for RTSP stream emulation 
          APP_VERSION=$(date +"%y%m%d.%H%M%S")
          IMAGE_TAG=${APP_VERSION}
          ALTERNATIVE_TAG="latest"
          IMAGE_FOLDER="streamer"
          RTSPSERVER_NAME="rtspserver"
          FLAVOR="alpine"
          IMAGE_NAME="${RTSPSERVER_NAME}-${FLAVOR}-image"
          RTSP_SERVER_PORT=554

          echo "Create User Assigned Identity ${{ env.CONTAINER_INSTANCE_IDENTITY_NAME }}"
          cmd="az identity create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_INSTANCE_IDENTITY_NAME }}"
          echo "$cmd"
          eval "$cmd"    

          # Get service principal ID of the user-assigned identity
          spID=$(az identity show \
          --resource-group  ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_INSTANCE_IDENTITY_NAME }} \
          --query principalId --output tsv)

          # Get resource ID of the user-assigned identity
          identityResourceID=$(az identity show \
          --resource-group  ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_INSTANCE_IDENTITY_NAME }} \
          --query id --output tsv)

          # Wait few seconds before assigning role
          echo "Wait 30 seconds"
          sleep 30

          echo "Grant Access to the Azure Container Registry ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }} from the Azure Container Instance ${{ env.CONTAINER_INSTANCE_NAME }} role AcrPull"
          resourceID=$(az acr show --resource-group  ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_REGISTRY_NAME }} --query id --output tsv)
          cmd="az role assignment create --assignee ${spID} --scope ${resourceID} --role acrpull"
          echo "$cmd"
          eval "$cmd"

          cmd="az container create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_INSTANCE_NAME }} --image ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }}/${IMAGE_FOLDER}/${IMAGE_NAME}:${ALTERNATIVE_TAG} --dns-name-label ${{ env.CONTAINER_INSTANCE_NAME }} --ports ${RTSP_SERVER_PORT} -e PORT_RTSP=${RTSP_SERVER_PORT} --acr-identity ${identityResourceID}  --assign-identity ${identityResourceID}"
          echo "$cmd"
          eval "$cmd"    
          DNS_NAME=$(az container show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.CONTAINER_INSTANCE_NAME }} | jq -r '.ipAddress.fqdn')
          for i in ./input/*.mp4 
          do 
            echo "Run the following command:"
            echo "  ffprobe -i rtsp://${DNS_NAME}:${ARG_RTSP_SERVER_PORT}/media/$(basename $i)"
          done
          echo "Deploying the RTSP server to emulate the cameras done"


